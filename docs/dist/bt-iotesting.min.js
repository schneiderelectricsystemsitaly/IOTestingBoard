(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.IOTestingBT=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.BTApiState=void 0;const MeterState_1=require("./MeterState");const constants_1=require("./constants");const NotificationData_1=require("./NotificationData");const log=require("loglevel");class BTApiState{constructor(){this.state=constants_1.State.NOT_CONNECTED;this.prev_state=constants_1.State.NOT_CONNECTED;this.state_cpt=0;this.started=false;this.stopRequest=false;this.lastMeasure=new NotificationData_1.NotificationData;this.meter=new MeterState_1.MeterState;this.command=null;this.response=null;this.btDevice=null;this.btGATTServer=null;this.btIOTService=null;this.charRead=null;this.charWrite=null;this.btDeviceInfoService=null;this.charHWRev=null;this.charFirmware=null;this.btBatteryService=null;this.charBattery=null;this.stats={requests:0,responses:0,modbus_errors:0,"GATT disconnects":0,exceptions:0,subcribes:0,commands:0,responseTime:0,lastResponseTime:"? ms",last_connect:new Date(2020,1,1).toISOString()};this.options={forceDeviceSelection:true}}async reset(onDisconnectEvent=null){if(this.charRead!=null){try{if(this.btDevice?.gatt?.connected){await this.charRead.stopNotifications()}}catch(error){}}if(this.btDevice!=null){try{if(this.btDevice?.gatt?.connected){log.warn("* Calling disconnect on btdevice");this.btDevice.removeEventListener("gattserverdisconnected",onDisconnectEvent);this.btDevice.gatt.disconnect()}}catch(error){}}this.btBatteryService=null;this.btDeviceInfoService=null;this.btGATTServer=null;this.charBattery=null;this.charFirmware=null;this.charRead=null;this.charHWRev=null;this.charWrite=null}}exports.BTApiState=BTApiState},{"./MeterState":6,"./NotificationData":7,"./constants":8,loglevel:12}],2:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Command=void 0;const constants_1=require("./constants");class Command{constructor(ctype){this.type=parseInt(ctype);this.setpoint=null;this.setpoint=null;this.setpoint3=null;this.setpoint4=null;this.error=false;this.pending=true;this.request=null;this.response=null}static CreateNoSP(ctype){const cmd=new Command(ctype);return cmd}static CreateOneSP(ctype,setpoint){const cmd=new Command(ctype);cmd.setpoint=setpoint;return cmd}static CreateFourSP(ctype,set1,set2,set3,set4){const cmd=new Command(ctype);cmd.setpoint=set1;cmd.setpoint2=set2;cmd.setpoint3=set3;cmd.setpoint4=set4;return cmd}toString(){return"Type: "+this.type+", setpoint:"+this.setpoint+", setpoint2: "+this.setpoint2+", pending:"+this.pending+", error:"+this.error}defaultSetpoint(){switch(this.type){case constants_1.CommandType.COMMAND_ENABLE_WIFI:return{};case constants_1.CommandType.COMMAND_DISABLE_WIFI:return{};case constants_1.CommandType.COMMAND_ENABLE_WEBREPL:return{};case constants_1.CommandType.COMMAND_DISABLE_WEBREPL:return{};case constants_1.CommandType.COMMAND_BREAK:return{};case constants_1.CommandType.COMMAND_MODE_METER:return{};case constants_1.CommandType.COMMAND_MODE_RESISTORS:return{"Resistance (ohms)":65535};case constants_1.CommandType.COMMAND_MODE_V_LOAD:return{"Load (ohms)":550};case constants_1.CommandType.COMMAND_REBOOT:return{};case constants_1.CommandType.COMMAND_RUN_TEST:return{};case constants_1.CommandType.COMMAND_LIGHT_SLEEP:return{};case constants_1.CommandType.COMMAND_DEEP_SLEEP:return{};case constants_1.CommandType.COMMAND_METER_COMMANDS:return{Enable:true};case constants_1.CommandType.COMMAND_SET_INITIAL_METER_COMM:return{Enable:true};case constants_1.CommandType.COMMAND_SET_WIFI_NETWORK:return{SSID:""};case constants_1.CommandType.COMMAND_SET_WIFI_PASSWORD:return{Password:""};case constants_1.CommandType.COMMAND_SET_INITIAL_BLUETOOTH:return{Enable:true};case constants_1.CommandType.COMMAND_SET_INITIAL_WIFI:return{Enable:true};case constants_1.CommandType.COMMAND_SET_DEEPSLEEP_MIN:return{"Delay (min)":15};case constants_1.CommandType.COMMAND_SET_VERBOSE:return{Enable:true};case constants_1.CommandType.COMMAND_SET_INITIAL_COMMAND_TYPE:return{"Command type(1/2/3)":1};case constants_1.CommandType.COMMAND_SET_INITIAL_COMMAND_SETPOINT:return{"Setpoint (ohms)":65535};case constants_1.CommandType.COMMAND_R_TEST:return{};case constants_1.CommandType.COMMAND_SET_CPU:return{"Frequency (MHz: 1->80, 2->160, 3->240)":1};case constants_1.CommandType.COMMAND_SET_OTA:return{Enable:true};case constants_1.CommandType.COMMAND_CONFIGURE_METER_COMM:return{Index:0,"Voltage (V)":8,"Command type (1/2/3)":2,"Setpoint (ohms)":1100};case constants_1.CommandType.COMMAND_SET_BLUETOOTH_NAME:return{"Device name":"IOTesting board"};case constants_1.CommandType.COMMAND_REFRESH:return{};default:return{}}}}exports.Command=Command},{"./constants":8}],3:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CommandResult=void 0;class CommandResult{constructor(){this.value=0;this.success=false;this.message="";this.unit="";this.secondary_value=0;this.secondary_unit=""}}exports.CommandResult=CommandResult},{}],4:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Driver=void 0;const APIState_1=require("./APIState");const constants_1=require("./constants");const IOTestingBoard_1=require("./IOTestingBoard");const Command_1=require("./Command");const utils_1=require("./utils");const log=require("loglevel");class Driver{constructor(){this.logging=false;this.simulation=false;this.btState=new APIState_1.BTApiState;this.iot=new IOTestingBoard_1.IOTestingBoard(this.SendAndResponse,this.btState)}async SendAndResponse(command){if(command==null||this.btState.charWrite==null){return null}log.debug(">> "+(0,utils_1.buf2hex)(command));this.btState.response=null;this.btState.stats.requests++;const startTime=(new Date).getTime();await this.btState.charWrite.writeValueWithoutResponse(command);while(this.btState.state==constants_1.State.METER_INITIALIZING||this.btState.state==constants_1.State.BUSY){if(this.btState.response!=null)break;await new Promise(resolve=>setTimeout(resolve,35))}const endTime=(new Date).getTime();const answer=this.btState.response?.slice(0);this.btState.lastMeasure=IOTestingBoard_1.IOTestingBoard.parseNotification(answer);this.btState.response=null;if(this.logging){const packet={request:(0,utils_1.buf2hex)(command),answer:(0,utils_1.buf2hex)(answer)};const storage_value=window.localStorage.getItem("IOTestingTrace");let packets=[];if(storage_value!=null){packets=JSON.parse(storage_value)}packets.push(JSON.stringify(packet));window.localStorage.setItem("IOTestingTrace",JSON.stringify(packets))}this.btState.stats.responseTime=Math.round((1*this.btState.stats.responseTime*(this.btState.stats.responses%500)+(endTime-startTime))/(this.btState.stats.responses%500+1));this.btState.stats.lastResponseTime=Math.round(endTime-startTime)+" ms";this.btState.stats.responses++;return answer}async stateMachine(){let nextAction;const DELAY_MS=this.simulation?20:750;const TIMEOUT_MS=this.simulation?1e3:3e4;this.btState.started=true;log.debug("Current state:"+this.btState.state);if(this.btState.state==this.btState.prev_state){this.btState.state_cpt++}else{this.btState.state_cpt=0}if(this.btState.stopRequest){this.btState.state=constants_1.State.STOPPING}log.debug("State:"+this.btState.state);switch(this.btState.state){case constants_1.State.NOT_CONNECTED:if(this.simulation){nextAction=this.fakePairDevice.bind(this)}else{nextAction=this.btPairDevice.bind(this)}break;case constants_1.State.CONNECTING:nextAction=undefined;break;case constants_1.State.DEVICE_PAIRED:if(this.simulation){nextAction=this.fakeSubscribe.bind(this)}else{nextAction=this.btSubscribe.bind(this)}break;case constants_1.State.SUBSCRIBING:nextAction=undefined;if(this.btState.state_cpt>TIMEOUT_MS/DELAY_MS){log.warn("Timeout in SUBSCRIBING");this.btState.state=constants_1.State.DEVICE_PAIRED;this.btState.state_cpt=0}break;case constants_1.State.METER_INIT:nextAction=this.meterInit.bind(this);break;case constants_1.State.METER_INITIALIZING:if(this.btState.state_cpt>TIMEOUT_MS/DELAY_MS){log.warn("Timeout in METER_INITIALIZING");if(this.simulation){nextAction=this.fakeSubscribe.bind(this)}else{nextAction=this.btSubscribe.bind(this)}this.btState.state_cpt=0}nextAction=undefined;break;case constants_1.State.IDLE:if(this.btState.command!=null){nextAction=this.processCommand.bind(this)}else{nextAction=this.refresh.bind(this)}break;case constants_1.State.ERROR:nextAction=this.disconnect.bind(this);break;case constants_1.State.BUSY:if(this.btState.state_cpt>TIMEOUT_MS/DELAY_MS){log.warn("Timeout in BUSY");if(this.simulation){nextAction=this.fakeSubscribe.bind(this)}else{nextAction=this.btSubscribe.bind(this)}this.btState.state_cpt=0}nextAction=undefined;break;case constants_1.State.STOPPING:nextAction=this.disconnect.bind(this);break;case constants_1.State.STOPPED:nextAction=undefined;break;default:break}this.btState.prev_state=this.btState.state;if(nextAction!=undefined){log.debug("\tExecuting:"+nextAction.name);try{await nextAction()}catch(e){log.error("Exception in state machine",e)}}if(this.btState.state!=constants_1.State.STOPPED){void(0,utils_1.sleep)(DELAY_MS).then(async()=>{await this.stateMachine()})}else{log.debug("\tTerminating State machine");this.btState.started=false}}async processCommand(){try{let response;const command=this.btState.command;if(command==null){return}this.btState.state=constants_1.State.BUSY;this.btState.stats.commands++;log.info("\t\tExecuting command :"+command);const packet_clear=IOTestingBoard_1.IOTestingBoard.getPacket(Command_1.Command.CreateNoSP(constants_1.CommandType.COMMAND_CLEAR_FLAGS));const packet=IOTestingBoard_1.IOTestingBoard.getPacket(command);const packets=[packet_clear,packet];for(const msg of packets){const currentCpt=this.btState.lastMeasure!=null?this.btState.lastMeasure.CommandCpt:-1;do{response=await this.SendAndResponse(msg)}while(currentCpt==this.btState.lastMeasure?.CommandCpt)}command.error=!this.btState.lastMeasure.LastResult;log.debug("\t\tRefreshing current state");await this.refresh();command.pending=false;this.btState.command=null;this.btState.state=constants_1.State.IDLE;log.debug("\t\tCompleted command executed")}catch(err){log.error("** error while executing command: "+err);this.btState.state=constants_1.State.METER_INIT;this.btState.stats.exceptions++}}async meterInit(){try{this.btState.state=constants_1.State.METER_INITIALIZING;this.btState.meter.hw_rev=await this.iot.getHardwareRevision();log.info("\t\tSerial number:"+this.btState.meter.hw_rev);this.btState.meter.firmware=await this.iot.getFirmware();log.info("\t\tSerial number:"+this.btState.meter.firmware);this.btState.meter.battery=await this.iot.getBatteryLevel();log.debug("\t\tBattery (%):"+this.btState.meter.battery);this.btState.state=constants_1.State.IDLE}catch(err){log.warn("Error while initializing meter :"+err);this.btState.stats.exceptions++;this.btState.state=constants_1.State.DEVICE_PAIRED}}async disconnect(){this.btState.command=null;await this.btState.reset(this.onDisconnected.bind(this));this.btState.state=constants_1.State.STOPPED}async onDisconnected(){log.warn("* GATT Server disconnected event, will try to reconnect *");await this.btState.reset();this.btState.stats["GATT disconnects"]++;this.btState.state=constants_1.State.DEVICE_PAIRED}arrayBufferConcat(buffer1,buffer2){let length=0;let buffer;for(var i in arguments){buffer=arguments[i];if(buffer){length+=buffer.byteLength}}const joined=new Uint8Array(length);let offset=0;for(i in arguments){buffer=arguments[i];joined.set(new Uint8Array(buffer),offset);offset+=buffer.byteLength}return joined.buffer}handleNotifications(event){const value=event.target.value;if(value!=null){log.debug("<< "+(0,utils_1.buf2hex)(value.buffer));this.btState.response=value.buffer.slice(0)}}async btPairDevice(){this.btState.state=constants_1.State.CONNECTING;const forceSelection=this.btState.options.forceDeviceSelection;log.debug("btPairDevice("+forceSelection+")");try{if(typeof navigator.bluetooth?.getAvailability==="function"){const availability=await navigator.bluetooth.getAvailability();if(!availability){log.error("Bluetooth not available in browser.");throw new Error("Browser does not provide bluetooth")}}let device=null;if(typeof navigator.bluetooth?.getDevices==="function"&&!forceSelection){const availableDevices=await navigator.bluetooth.getDevices();availableDevices.forEach(function(dev,index){log.debug("Found authorized device :"+dev.name);device=dev});log.debug("navigator.bluetooth.getDevices()="+device)}if(device==null){device=await navigator.bluetooth.requestDevice({acceptAllDevices:false,filters:[{services:[constants_1.BlueToothIOTUUID.ServiceUuid.toLowerCase()]}],optionalServices:["battery_service","generic_access","device_information",constants_1.BlueToothIOTUUID.ServiceUuid.toLowerCase()]})}this.btState.btDevice=device;this.btState.state=constants_1.State.DEVICE_PAIRED;log.info("Bluetooth device "+device.name+" connected.");await(0,utils_1.sleep)(500)}catch(err){log.warn("** error while connecting: "+err.message);await this.btState.reset(this.onDisconnected.bind(this));this.btState.state=constants_1.State.ERROR;this.btState.stats.exceptions++}}async fakePairDevice(){this.btState.state=constants_1.State.CONNECTING;const forceSelection=this.btState.options.forceDeviceSelection;log.debug("fakePairDevice("+forceSelection+")");try{const device={name:"FakeBTDevice",gatt:{connected:true,device:null,connect:null,disconnect:null,getPrimaryService:null,getPrimaryServices:null},id:"1",forget:null,watchAdvertisements:null,watchingAdvertisements:null,addEventListener:null,removeEventListener:null,dispatchEvent:null,onadvertisementreceived:null,ongattserverdisconnected:null,oncharacteristicvaluechanged:null,onserviceadded:null,onserviceremoved:null,onservicechanged:null};this.btState.btDevice=device;this.btState.state=constants_1.State.DEVICE_PAIRED;log.info("Bluetooth device "+device.name+" connected.");await(0,utils_1.sleep)(50)}catch(err){log.warn("** error while connecting: "+err.message);await this.btState.reset();this.btState.stats.exceptions++}}async btSubscribe(){try{this.btState.state=constants_1.State.SUBSCRIBING;this.btState.stats.subcribes++;const device=this.btState.btDevice;const gattserver=null;if(device&&device.gatt){if(!device.gatt.connected||this.btState.btGATTServer==null){log.debug(`Connecting to GATT Server on ${device.name}...`);device.addEventListener("gattserverdisconnected",this.onDisconnected.bind(this));this.btState.btGATTServer=await device.gatt.connect();log.debug("> Found GATT server")}else{log.debug("GATT already connected")}}else{await this.btState.reset(this.onDisconnected.bind(this));this.btState.btDevice=null;this.btState.state=constants_1.State.NOT_CONNECTED;this.btState.stats.exceptions++;return}this.btState.btIOTService=await this.btState.btGATTServer.getPrimaryService(constants_1.BlueToothIOTUUID.ServiceUuid);log.debug("> Found IOTesting board service");this.btState.charWrite=await this.btState.btIOTService.getCharacteristic(constants_1.BlueToothIOTUUID.CommandCharUuid);log.debug("> Found command characteristic");this.btState.charRead=await this.btState.btIOTService.getCharacteristic(constants_1.BlueToothIOTUUID.StatusCharUuid);log.debug("> Found notifications characteristic");this.btState.btDeviceInfoService=await this.btState.btGATTServer.getPrimaryService("device_information");this.btState.charFirmware=await this.btState.btDeviceInfoService.getCharacteristic(10790);this.btState.charHWRev=await this.btState.btDeviceInfoService.getCharacteristic(10791);this.btState.btBatteryService=await this.btState.btGATTServer.getPrimaryService("battery_service");this.btState.charBattery=await this.btState.btBatteryService.getCharacteristic(10777);this.btState.response=null;this.btState.charRead.addEventListener("characteristicvaluechanged",this.handleNotifications.bind(this));await this.btState.charRead.startNotifications();log.info("> Bluetooth interfaces ready.");this.btState.stats.last_connect=(new Date).toISOString();await(0,utils_1.sleep)(50);this.btState.state=constants_1.State.METER_INIT}catch(err){log.warn("** error while subscribing: "+err.message);await this.btState.reset();this.btState.state=constants_1.State.DEVICE_PAIRED;this.btState.stats.exceptions++}}async fakeSubscribe(){try{this.btState.state=constants_1.State.SUBSCRIBING;this.btState.stats.subcribes++;const device=this.btState.btDevice;if(!device?.gatt?.connected){log.debug(`Connecting to GATT Server on ${device?.name}...`);log.debug("> Found GATT server")}log.debug("> Found Serial service");log.debug("> Found write characteristic");log.debug("> Found read characteristic");this.btState.response=null;log.info("> Bluetooth interfaces ready.");this.btState.stats.last_connect=(new Date).toISOString();await(0,utils_1.sleep)(10);this.btState.state=constants_1.State.METER_INIT}catch(err){log.warn("** error while subscribing: "+err.message);await this.btState.reset(this.onDisconnected.bind(this));this.btState.state=constants_1.State.DEVICE_PAIRED;this.btState.stats.exceptions++}}async refresh(){this.btState.state=constants_1.State.BUSY;try{log.debug("\t\tFinished refreshing current state");if(this.btState.response){this.btState.lastMeasure=IOTestingBoard_1.IOTestingBoard.parseNotification(this.btState.response);this.btState.response=null}if(this.btState.lastMeasure!=null){this.btState.meter.actual=this.btState.lastMeasure.Actual_R;this.btState.meter.setpoint=this.btState.lastMeasure.Setpoint_R;if(Math.random()>.95){this.btState.meter.battery=await this.iot.getBatteryLevel()}if(this.btState.lastMeasure.Test){this.btState.meter.mode=constants_1.BoardMode.MODE_TEST}else if(this.btState.lastMeasure.Relay==constants_1.RelayPosition.POS_METER){this.btState.meter.mode=constants_1.BoardMode.MODE_METER}else if(this.btState.lastMeasure.Relay==constants_1.RelayPosition.POS_RESISTOR){if(this.btState.lastMeasure.V_with_load){this.btState.meter.mode=constants_1.BoardMode.MODE_V_WITH_LOAD}else{this.btState.meter.mode=constants_1.BoardMode.MODE_RESISTOR}}else{this.btState.meter.mode=constants_1.BoardMode.MODE_UNDEFINED}this.btState.meter.free_bytes=this.btState.lastMeasure.Memfree}this.btState.state=constants_1.State.IDLE}catch(err){log.warn("Error while refreshing measure"+err);this.btState.state=constants_1.State.DEVICE_PAIRED;this.btState.stats.exceptions++}}SetSimulation(value){this.simulation=value}}exports.Driver=Driver},{"./APIState":1,"./Command":2,"./IOTestingBoard":5,"./constants":8,"./utils":11,loglevel:12}],5:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.IOTestingBoard=void 0;const log=require("loglevel");const constants_1=require("./constants");const NotificationData_1=require("./NotificationData");class IOTestingBoard{constructor(fnSendAndResponse,btApi){this.SendAndResponse=fnSendAndResponse;this.btState=btApi}uintToString(dv){const uint8arr=[];for(let i=0;i<dv.byteLength;i++){uint8arr.push(dv.getUint8(i))}const encodedString=String.fromCharCode.apply(null,uint8arr);const decodedString=decodeURIComponent(encodedString);return decodedString}async getHardwareRevision(){log.debug("\t\tReading HW rev");const dv=await this.btState.charHWRev.readValue();return this.uintToString(dv)}async getFirmware(){log.debug("\t\tReading firmware version");const dv=await this.btState.charFirmware.readValue();return this.uintToString(dv)}async getBatteryLevel(){log.debug("\t\tReading battery voltage");const dv=await this.btState.charBattery.readValue();return dv.getUint8(0)}static parseNotification(buf){if(buf.byteLength<11){return null}const output=new NotificationData_1.NotificationData;const dv=new DataView(buf);const status1=dv.getUint8(0);const status2=dv.getUint8(1);output.WiFi=status1>>6&3;output.Relay=status1>>4&3;output.Bluetooth=status1>>1&7;output.Error=(status2&64)!=0;output.Frequency=status2>>5&3;output.Verbose=(status2&8)!=0;output.Test=(status2&4)!=0;output.V_with_load=(status2&2)!=0;output.LastResult=(status2&1)!=0;output.Actual_R=dv.getUint16(2,true);output.Setpoint_R=dv.getUint16(4,true);output.Memfree=dv.getUint32(6,true);output.CommandCpt=dv.getUint8(10);log.debug("Decoded notification",output);return output}static getPacket(command){let buf;let dv;switch(command.type){case constants_1.CommandType.COMMAND_BREAK:case constants_1.CommandType.COMMAND_DISABLE_WEBREPL:case constants_1.CommandType.COMMAND_DISABLE_WIFI:case constants_1.CommandType.COMMAND_ENABLE_WEBREPL:case constants_1.CommandType.COMMAND_ENABLE_WIFI:case constants_1.CommandType.COMMAND_LIGHT_SLEEP:case constants_1.CommandType.COMMAND_MODE_METER:case constants_1.CommandType.COMMAND_REBOOT:case constants_1.CommandType.COMMAND_REFRESH:case constants_1.CommandType.COMMAND_RUN_TEST:case constants_1.CommandType.COMMAND_R_TEST:case constants_1.CommandType.COMMAND_DEEP_SLEEP:case constants_1.CommandType.COMMAND_CLEAR_FLAGS:buf=new ArrayBuffer(1);dv=new DataView(buf);dv.setUint8(0,command.type);return buf;case constants_1.CommandType.COMMAND_CONFIGURE_METER_COMM:buf=new ArrayBuffer(1+5);dv=new DataView(buf);dv.setUint8(0,command.type);dv.setUint8(1,command.setpoint);dv.setUint8(2,command.setpoint2);dv.setUint8(3,command.setpoint3);dv.setUint16(4,command.setpoint4,true);return buf;case constants_1.CommandType.COMMAND_SET_CPU:case constants_1.CommandType.COMMAND_SET_INITIAL_COMMAND_SETPOINT:case constants_1.CommandType.COMMAND_SET_INITIAL_COMMAND_TYPE:buf=new ArrayBuffer(2);dv=new DataView(buf);dv.setUint8(0,command.type);dv.setUint8(1,command.setpoint);return buf;case constants_1.CommandType.COMMAND_METER_COMMANDS:case constants_1.CommandType.COMMAND_SET_INITIAL_BLUETOOTH:case constants_1.CommandType.COMMAND_SET_INITIAL_METER_COMM:case constants_1.CommandType.COMMAND_SET_OTA:case constants_1.CommandType.COMMAND_SET_VERBOSE:case constants_1.CommandType.COMMAND_SET_INITIAL_WIFI:buf=new ArrayBuffer(2);dv=new DataView(buf);dv.setUint8(0,command.type);dv.setUint8(1,command.setpoint?1:0);return buf;case constants_1.CommandType.COMMAND_MODE_RESISTORS:case constants_1.CommandType.COMMAND_MODE_V_LOAD:case constants_1.CommandType.COMMAND_SET_DEEPSLEEP_MIN:buf=new ArrayBuffer(3);dv=new DataView(buf);dv.setUint8(0,command.type);dv.setUint16(1,command.setpoint,true);return buf;case constants_1.CommandType.COMMAND_SET_BLUETOOTH_NAME:case constants_1.CommandType.COMMAND_SET_WIFI_NETWORK:case constants_1.CommandType.COMMAND_SET_WIFI_PASSWORD:const utf8Encode=new TextEncoder;const bytes_utf8=utf8Encode.encode(command.setpoint);buf=new ArrayBuffer(1+bytes_utf8.length);dv=new DataView(buf);dv.setUint8(0,command.type);var byte_num=1;for(const byte_v of bytes_utf8){dv.setUint8(byte_num,byte_v);byte_num++}return buf;default:throw new Error("Invalid command"+command)}}}exports.IOTestingBoard=IOTestingBoard},{"./NotificationData":7,"./constants":8,loglevel:12}],6:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.MeterState=void 0;const constants_1=require("./constants");class MeterState{constructor(){this.firmware="???";this.hw_rev="???";this.mode=constants_1.BoardMode.MODE_UNDEFINED;this.setpoint=65535;this.actual=65535;this.free_bytes=0;this.battery=0}}exports.MeterState=MeterState},{"./constants":8}],7:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.NotificationData=void 0;class NotificationData{constructor(){this.WiFi=0;this.Relay=0;this.Bluetooth=0;this.Frequency=0;this.Verbose=false;this.Test=false;this.V_with_load=false;this.LastResult=false;this.Actual_R=0;this.Setpoint_R=0;this.Memfree=0;this.Error=false;this.CommandCpt=0;this.Timestamp=new Date}}exports.NotificationData=NotificationData},{}],8:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.BlueToothIOTUUID=exports.MAX_U_GEN=exports.ResultCode=exports.State=exports.RelayPosition=exports.BoardMode=exports.CommandType=void 0;exports.CommandType={NONE_UNKNOWN:0,COMMAND_ENABLE_WIFI:1,COMMAND_DISABLE_WIFI:2,COMMAND_ENABLE_WEBREPL:3,COMMAND_DISABLE_WEBREPL:4,COMMAND_BREAK:5,COMMAND_MODE_METER:6,COMMAND_MODE_RESISTORS:7,COMMAND_MODE_V_LOAD:8,COMMAND_REBOOT:9,COMMAND_RUN_TEST:10,COMMAND_LIGHT_SLEEP:11,COMMAND_DEEP_SLEEP:12,COMMAND_METER_COMMANDS:13,COMMAND_SET_INITIAL_METER_COMM:14,COMMAND_SET_WIFI_NETWORK:15,COMMAND_SET_WIFI_PASSWORD:16,COMMAND_SET_INITIAL_BLUETOOTH:17,COMMAND_SET_INITIAL_WIFI:18,COMMAND_SET_DEEPSLEEP_MIN:19,COMMAND_SET_VERBOSE:20,COMMAND_SET_INITIAL_COMMAND_TYPE:21,COMMAND_SET_INITIAL_COMMAND_SETPOINT:22,COMMAND_R_TEST:23,COMMAND_SET_CPU:24,COMMAND_SET_OTA:25,COMMAND_CONFIGURE_METER_COMM:32,COMMAND_SET_BLUETOOTH_NAME:33,COMMAND_REFRESH:34,COMMAND_CLEAR_FLAGS:35};exports.BoardMode={MODE_UNDEFINED:0,MODE_METER:1,MODE_RESISTOR:2,MODE_V_WITH_LOAD:3,MODE_TEST:4};exports.RelayPosition={POS_UNKNOWN:0,POS_METER:1,POS_RESISTOR:2};exports.State={NOT_CONNECTED:"Not connected",CONNECTING:"Bluetooth device pairing...",DEVICE_PAIRED:"Device paired",SUBSCRIBING:"Bluetooth interfaces connecting...",IDLE:"Idle",BUSY:"Busy",ERROR:"Error",STOPPING:"Closing BT interfaces...",STOPPED:"Stopped",METER_INIT:"Meter connected",METER_INITIALIZING:"Reading board state..."};exports.ResultCode={FAILED_NO_RETRY:1,FAILED_SHOULD_RETRY:2,SUCCESS:0};exports.MAX_U_GEN=27;exports.BlueToothIOTUUID={ServiceUuid:"0003cdd5-0000-1000-8000-00805f9b0131",StatusCharUuid:"0003cdd3-0000-1000-8000-00805f9b0131",CommandCharUuid:"0003cdd4-0000-1000-8000-00805f9b0131"}},{}],9:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.BoardMode=exports.State=exports.setLevel=exports.CommandType=exports.Command=exports.driver=exports.SimpleExecuteJSON=exports.ExecuteJSON=exports.GetStateJSON=exports.GetState=exports.SimpleExecute=exports.Execute=exports.Pair=exports.Stop=void 0;const constants_1=require("./constants");Object.defineProperty(exports,"State",{enumerable:true,get:function(){return constants_1.State}});Object.defineProperty(exports,"CommandType",{enumerable:true,get:function(){return constants_1.CommandType}});Object.defineProperty(exports,"BoardMode",{enumerable:true,get:function(){return constants_1.BoardMode}});const Command_1=require("./Command");Object.defineProperty(exports,"Command",{enumerable:true,get:function(){return Command_1.Command}});const loglevel_1=require("loglevel");Object.defineProperty(exports,"setLevel",{enumerable:true,get:function(){return loglevel_1.setLevel}});const meterPublicAPI_1=require("./meterPublicAPI");Object.defineProperty(exports,"Stop",{enumerable:true,get:function(){return meterPublicAPI_1.Stop}});Object.defineProperty(exports,"Pair",{enumerable:true,get:function(){return meterPublicAPI_1.Pair}});Object.defineProperty(exports,"Execute",{enumerable:true,get:function(){return meterPublicAPI_1.Execute}});Object.defineProperty(exports,"SimpleExecute",{enumerable:true,get:function(){return meterPublicAPI_1.SimpleExecute}});Object.defineProperty(exports,"GetState",{enumerable:true,get:function(){return meterPublicAPI_1.GetState}});Object.defineProperty(exports,"GetStateJSON",{enumerable:true,get:function(){return meterPublicAPI_1.GetStateJSON}});Object.defineProperty(exports,"ExecuteJSON",{enumerable:true,get:function(){return meterPublicAPI_1.ExecuteJSON}});Object.defineProperty(exports,"SimpleExecuteJSON",{enumerable:true,get:function(){return meterPublicAPI_1.SimpleExecuteJSON}});Object.defineProperty(exports,"driver",{enumerable:true,get:function(){return meterPublicAPI_1.driver}});(0,loglevel_1.setLevel)(loglevel_1.levels.ERROR,true)},{"./Command":2,"./constants":8,"./meterPublicAPI":10,loglevel:12}],10:[function(require,module,exports){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.Stop=exports.Pair=exports.Execute=exports.SimpleExecute=exports.SimpleExecuteJSON=exports.ExecuteJSON=exports.GetStateJSON=exports.GetState=exports.driver=void 0;const Driver_1=require("./Driver");const CommandResult_1=require("./CommandResult");const Command_1=require("./Command");const constants_1=require("./constants");const utils_1=require("./utils");const loglevel_1=__importDefault(require("loglevel"));exports.driver=new Driver_1.Driver;async function GetState(){let ready=false;let initializing=false;switch(exports.driver.btState.state){case constants_1.State.ERROR:case constants_1.State.STOPPED:case constants_1.State.NOT_CONNECTED:ready=false;initializing=false;break;case constants_1.State.BUSY:case constants_1.State.IDLE:ready=true;initializing=false;break;case constants_1.State.CONNECTING:case constants_1.State.DEVICE_PAIRED:case constants_1.State.METER_INIT:case constants_1.State.METER_INITIALIZING:case constants_1.State.SUBSCRIBING:initializing=true;ready=false;break;default:ready=false;initializing=false}return{lastSetpoint:exports.driver.btState.lastMeasure.Setpoint_R,lastMeasure:exports.driver.btState.lastMeasure.Actual_R,deviceName:exports.driver.btState.btDevice?exports.driver.btState.btDevice.name:"",deviceSerial:"",deviceHwRev:exports.driver.btState.meter?.hw_rev,deviceMode:exports.driver.btState.meter?.mode,status:exports.driver.btState.state,batteryLevel:exports.driver.btState.meter?.battery,firmware:exports.driver.btState.meter?.firmware,notification:exports.driver.btState.lastMeasure,ready:ready,initializing:initializing,stats:exports.driver.btState.stats}}exports.GetState=GetState;async function GetStateJSON(){return JSON.stringify(await GetState())}exports.GetStateJSON=GetStateJSON;async function ExecuteJSON(jsonCommand){const command=JSON.parse(jsonCommand);const command2=Command_1.Command.CreateFourSP(command.type,command.setpoint,command.setpoint2,command.setpoint3,command.setpoint4);return JSON.stringify(await Execute(command2))}exports.ExecuteJSON=ExecuteJSON;async function SimpleExecuteJSON(jsonCommand){const command=JSON.parse(jsonCommand);const command2=Command_1.Command.CreateFourSP(command.type,command.setpoint,command.setpoint2,command.setpoint3,command.setpoint4);return JSON.stringify(await SimpleExecute(command2))}exports.SimpleExecuteJSON=SimpleExecuteJSON;async function SimpleExecute(command){const SIMPLE_EXECUTE_TIMEOUT_S=5;const cr=new CommandResult_1.CommandResult;loglevel_1.default.info("SimpleExecute called...");if(command===null){cr.success=false;cr.message="Invalid command";return cr}command=Command_1.Command.CreateFourSP(command.type,command.setpoint,command.setpoint2,command.setpoint3,command.setpoint4);command.pending=true;if(!exports.driver.btState.started){cr.success=false;cr.message="Device is not paired";loglevel_1.default.warn(cr.message);return cr}if(exports.driver.btState.command!=null&&exports.driver.btState.command.pending){cr.success=false;cr.message="Another command is pending";loglevel_1.default.warn(cr.message);return cr}exports.driver.btState.command=command;if(command!=null){await(0,utils_1.waitForTimeout)(()=>!command.pending||exports.driver.btState.state==constants_1.State.STOPPED,SIMPLE_EXECUTE_TIMEOUT_S)}if(command.error||command.pending){cr.success=false;cr.message="Error while executing the command.";loglevel_1.default.warn(cr.message);exports.driver.btState.command=null;return cr}cr.value=exports.driver.btState.lastMeasure.Setpoint_R;cr.unit="Ohms";cr.secondary_value=exports.driver.btState.lastMeasure.Actual_R;cr.secondary_unit="Ohms";cr.success=true;cr.message="Command executed successfully";return cr}exports.SimpleExecute=SimpleExecute;async function Execute(command){loglevel_1.default.info("Execute called...");if(command==null){return null}command=Command_1.Command.CreateFourSP(command.type,command.setpoint,command.setpoint2,command.setpoint3,command.setpoint4);command.pending=true;let cpt=0;while(exports.driver.btState.command!=null&&exports.driver.btState.command.pending&&cpt<300){loglevel_1.default.debug("Waiting for current command to complete...");await(0,utils_1.sleep)(100);cpt++}loglevel_1.default.info("Setting new command :"+command);exports.driver.btState.command=command;if(!exports.driver.btState.started){exports.driver.btState.state=constants_1.State.NOT_CONNECTED;await exports.driver.stateMachine()}if(command!=null){await(0,utils_1.waitFor)(()=>!command.pending||exports.driver.btState.state==constants_1.State.STOPPED)}return command}exports.Execute=Execute;async function Pair(forceSelection=false){loglevel_1.default.info("Pair("+forceSelection+") called...");exports.driver.btState.options.forceDeviceSelection=forceSelection;if(!exports.driver.btState.started){exports.driver.btState.state=constants_1.State.NOT_CONNECTED;await exports.driver.stateMachine()}else if(exports.driver.btState.state==constants_1.State.ERROR){exports.driver.btState.state=constants_1.State.NOT_CONNECTED}await(0,utils_1.waitFor)(()=>exports.driver.btState.state==constants_1.State.IDLE||exports.driver.btState.state==constants_1.State.STOPPED);loglevel_1.default.info("Pairing completed, state :",exports.driver.btState.state);return exports.driver.btState.state!=constants_1.State.STOPPED}exports.Pair=Pair;async function Stop(){loglevel_1.default.info("Stop request received");exports.driver.btState.stopRequest=true;await(0,utils_1.sleep)(100);while(exports.driver.btState.started||exports.driver.btState.state!=constants_1.State.STOPPED&&exports.driver.btState.state!=constants_1.State.NOT_CONNECTED){exports.driver.btState.stopRequest=true;await(0,utils_1.sleep)(100)}exports.driver.btState.command=null;exports.driver.btState.stopRequest=false;loglevel_1.default.warn("Stopped on request.");return true}exports.Stop=Stop},{"./Command":2,"./CommandResult":3,"./Driver":4,"./constants":8,"./utils":11,loglevel:12}],11:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.buf2hex=exports.Parse=exports.waitForTimeout=exports.waitFor=exports.sleep=void 0;const sleep=async ms=>await new Promise(r=>setTimeout(r,ms));exports.sleep=sleep;const waitFor=async function waitFor(f){while(!f())await(0,exports.sleep)(100+Math.random()*25);return f()};exports.waitFor=waitFor;const waitForTimeout=async function waitFor(f,timeoutSec){let totalTimeMs=0;while(!f()&&totalTimeMs<timeoutSec*1e3){const delayMs=100+Math.random()*25;totalTimeMs+=delayMs;await(0,exports.sleep)(delayMs)}return f()};exports.waitForTimeout=waitForTimeout;function Parse(enumtype,enumvalue){for(const enumName in enumtype){if(enumtype[enumName]==enumvalue){return eval(enumtype+"."+enumName)}}return null}exports.Parse=Parse;function buf2hex(buffer){return[...new Uint8Array(buffer)].map(x=>x.toString(16).padStart(2,"0")).join(" ")}exports.buf2hex=buf2hex;function hex2buf(input){if(typeof input!=="string"){throw new TypeError("Expected input to be a string")}const hexstr=input.replace(/\s+/g,"");if(hexstr.length%2!==0){throw new RangeError("Expected string to be an even number of characters")}const view=new Uint8Array(hexstr.length/2);for(let i=0;i<hexstr.length;i+=2){view[i/2]=parseInt(hexstr.substring(i,i+2),16)}return view.buffer}},{}],12:[function(require,module,exports){(function(root,definition){"use strict";if(typeof define==="function"&&define.amd){define(definition)}else if(typeof module==="object"&&module.exports){module.exports=definition()}else{root.log=definition()}})(this,function(){"use strict";var noop=function(){};var undefinedType="undefined";var isIE=typeof window!==undefinedType&&typeof window.navigator!==undefinedType&&/Trident\/|MSIE /.test(window.navigator.userAgent);var logMethods=["trace","debug","info","warn","error"];function bindMethod(obj,methodName){var method=obj[methodName];if(typeof method.bind==="function"){return method.bind(obj)}else{try{return Function.prototype.bind.call(method,obj)}catch(e){return function(){return Function.prototype.apply.apply(method,[obj,arguments])}}}}function traceForIE(){if(console.log){if(console.log.apply){console.log.apply(console,arguments)}else{Function.prototype.apply.apply(console.log,[console,arguments])}}if(console.trace)console.trace()}function realMethod(methodName){if(methodName==="debug"){methodName="log"}if(typeof console===undefinedType){return false}else if(methodName==="trace"&&isIE){return traceForIE}else if(console[methodName]!==undefined){return bindMethod(console,methodName)}else if(console.log!==undefined){return bindMethod(console,"log")}else{return noop}}function replaceLoggingMethods(level,loggerName){for(var i=0;i<logMethods.length;i++){var methodName=logMethods[i];this[methodName]=i<level?noop:this.methodFactory(methodName,level,loggerName)}this.log=this.debug}function enableLoggingWhenConsoleArrives(methodName,level,loggerName){return function(){if(typeof console!==undefinedType){replaceLoggingMethods.call(this,level,loggerName);this[methodName].apply(this,arguments)}}}function defaultMethodFactory(methodName,level,loggerName){return realMethod(methodName)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(name,defaultLevel,factory){var self=this;var currentLevel;defaultLevel=defaultLevel==null?"WARN":defaultLevel;var storageKey="loglevel";if(typeof name==="string"){storageKey+=":"+name}else if(typeof name==="symbol"){storageKey=undefined}function persistLevelIfPossible(levelNum){var levelName=(logMethods[levelNum]||"silent").toUpperCase();if(typeof window===undefinedType||!storageKey)return;try{window.localStorage[storageKey]=levelName;return}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+"="+levelName+";"}catch(ignore){}}function getPersistedLevel(){var storedLevel;if(typeof window===undefinedType||!storageKey)return;try{storedLevel=window.localStorage[storageKey]}catch(ignore){}if(typeof storedLevel===undefinedType){try{var cookie=window.document.cookie;var location=cookie.indexOf(encodeURIComponent(storageKey)+"=");if(location!==-1){storedLevel=/^([^;]+)/.exec(cookie.slice(location))[1]}}catch(ignore){}}if(self.levels[storedLevel]===undefined){storedLevel=undefined}return storedLevel}function clearPersistedLevel(){if(typeof window===undefinedType||!storageKey)return;try{window.localStorage.removeItem(storageKey);return}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC"}catch(ignore){}}self.name=name;self.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5};self.methodFactory=factory||defaultMethodFactory;self.getLevel=function(){return currentLevel};self.setLevel=function(level,persist){if(typeof level==="string"&&self.levels[level.toUpperCase()]!==undefined){level=self.levels[level.toUpperCase()]}if(typeof level==="number"&&level>=0&&level<=self.levels.SILENT){currentLevel=level;if(persist!==false){persistLevelIfPossible(level)}replaceLoggingMethods.call(self,level,name);if(typeof console===undefinedType&&level<self.levels.SILENT){return"No console available for logging"}}else{throw"log.setLevel() called with invalid level: "+level}};self.setDefaultLevel=function(level){defaultLevel=level;if(!getPersistedLevel()){self.setLevel(level,false)}};self.resetLevel=function(){self.setLevel(defaultLevel,false);clearPersistedLevel()};self.enableAll=function(persist){self.setLevel(self.levels.TRACE,persist)};self.disableAll=function(persist){self.setLevel(self.levels.SILENT,persist)};var initialLevel=getPersistedLevel();if(initialLevel==null){initialLevel=defaultLevel}self.setLevel(initialLevel,false)}var defaultLogger=new Logger;var _loggersByName={};defaultLogger.getLogger=function getLogger(name){if(typeof name!=="symbol"&&typeof name!=="string"||name===""){throw new TypeError("You must supply a name when creating a logger.")}var logger=_loggersByName[name];if(!logger){logger=_loggersByName[name]=new Logger(name,defaultLogger.getLevel(),defaultLogger.methodFactory)}return logger};var _log=typeof window!==undefinedType?window.log:undefined;defaultLogger.noConflict=function(){if(typeof window!==undefinedType&&window.log===defaultLogger){window.log=_log}return defaultLogger};defaultLogger.getLoggers=function getLoggers(){return _loggersByName};defaultLogger["default"]=defaultLogger;return defaultLogger})},{}]},{},[9])(9)});